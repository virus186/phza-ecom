<?php
/*   __________________________________________________
    |  Obfuscated by YAK Pro - Php Obfuscator  2.0.14  |
    |              on 2022-12-16 18:01:51              |
    |    GitHub: https://github.com/pk-fr/yakpro-po    |
    |__________________________________________________|
*/
/*
* Copyright (C) Incevio Systems, Inc - All Rights Reserved
* Unauthorized copying of this file, via any medium is strictly prohibited
* Proprietary and confidential
* Written by Munna Khan <help.Phza24@gmail.com>, September 2018
*/
 namespace App\Http\Controllers\Installer\Helpers; use Exception; use Illuminate\Database\SQLiteConnection; use Illuminate\Support\Facades\Artisan; use Illuminate\Support\Facades\Config; use Illuminate\Support\Facades\DB; use Symfony\Component\Console\Output\BufferedOutput; class DatabaseManager { public function migrateAndSeed() { $outputLog = new BufferedOutput(); $this->sqlite($outputLog); return $this->migrate($outputLog); } private function migrate($outputLog) { try { Artisan::call("\155\x69\147\x72\141\164\x65", ["\55\55\146\x6f\162\x63\x65" => true], $outputLog); } catch (Exception $e) { return $this->response($e->getMessage(), "\145\x72\x72\x6f\x72", $outputLog); } return $this->seed($outputLog); } private function seed($outputLog) { try { Artisan::call("\144\142\x3a\x73\145\x65\x64", ["\x2d\55\146\x6f\162\x63\x65" => true], $outputLog); Artisan::call("\151\x6e\143\145\x76\151\x6f\x3a\147\145\x6e\145\x72\x61\164\145\x2d\153\x65\x79", ["\55\55\146\157\162\x63\145" => true], $outputLog); } catch (Exception $e) { return $this->response($e->getMessage(), "\x65\x72\162\157\162", $outputLog); } return $this->response(trans("\151\x6e\163\x74\141\x6c\x6c\x65\162\137\x6d\145\163\163\x61\147\145\163\x2e\x66\x69\x6e\x61\x6c\56\146\151\x6e\x69\163\x68\145\144"), "\163\165\x63\143\x65\163\x73", $outputLog); } public function seedDemoData() { ini_set("\155\141\170\x5f\x65\x78\145\x63\165\x74\151\157\156\137\164\x69\155\x65", 1200); $outputLog = new BufferedOutput(); try { Artisan::call("\151\x6e\x63\x65\166\151\x6f\72\144\145\155\x6f"); } catch (Exception $e) { return $this->response($e->getMessage(), "\145\x72\x72\x6f\162", $outputLog); } return $this->response(trans("\151\x6e\163\164\x61\x6c\x6c\145\x72\137\155\145\x73\x73\x61\x67\x65\163\x2e\146\x69\x6e\x61\x6c\56\x66\151\x6e\x69\163\150\x65\x64"), "\163\x75\x63\143\145\x73\x73", $outputLog); } private function response($message, $status, $outputLog) { return ["\x73\x74\x61\164\165\163" => $status, "\155\145\x73\x73\x61\147\x65" => $message, "\144\142\x4f\x75\x74\160\165\164\x4c\x6f\147" => $outputLog->fetch()]; } private function sqlite($outputLog) { if (!DB::connection() instanceof SQLiteConnection) { goto jiThZ; } $database = DB::connection()->getDatabaseName(); if (file_exists($database)) { goto i6Zjm; } touch($database); DB::reconnect(Config::get("\144\141\x74\141\x62\x61\x73\x65\56\144\x65\146\141\x75\x6c\x74")); i6Zjm: $outputLog->write("\x55\163\x69\156\x67\40\123\161\154\114\x69\164\145\40\x64\x61\x74\141\x62\141\163\x65\x3a\40" . $database, 1); jiThZ: } }
