<?php

 namespace App\Http\Controllers\Installer\Helpers; use Exception; use Illuminate\Database\SQLiteConnection; use Illuminate\Support\Facades\Artisan; use Illuminate\Support\Facades\Config; use Illuminate\Support\Facades\DB; use Symfony\Component\Console\Output\BufferedOutput; class DatabaseManager { public function migrateAndSeed() { $outputLog = new BufferedOutput(); $this->sqlite($outputLog); return $this->migrate($outputLog); } private function migrate($outputLog) { try { Artisan::call("\155\x69\147\x72\141\x74\145", ["\55\55\x66\x6f\162\x63\145" => true], $outputLog); } catch (Exception $e) { return $this->response($e->getMessage(), "\145\x72\162\157\x72", $outputLog); } return $this->seed($outputLog); } private function seed($outputLog) { try { Artisan::call("\144\x62\72\163\145\x65\144", ["\55\x2d\146\157\162\143\x65" => true], $outputLog); Artisan::call("\151\x6e\143\145\x76\151\x6f\72\147\x65\156\145\162\141\164\145\x2d\x6b\145\171", ["\55\55\146\x6f\x72\143\x65" => true], $outputLog); } catch (Exception $e) { return $this->response($e->getMessage(), "\145\162\162\x6f\x72", $outputLog); } return $this->response(trans("\151\x6e\163\x74\141\154\154\x65\x72\137\155\145\163\163\x61\147\x65\163\56\x66\x69\x6e\141\x6c\x2e\x66\151\156\151\163\150\145\x64"), "\163\165\143\x63\145\x73\x73", $outputLog); } public function seedDemoData() { ini_set("\155\x61\x78\x5f\145\x78\x65\143\165\164\151\157\x6e\137\164\151\155\145", 1200); $outputLog = new BufferedOutput(); try { Artisan::call("\x69\156\143\x65\166\151\x6f\72\144\145\155\x6f"); } catch (Exception $e) { return $this->response($e->getMessage(), "\145\162\x72\x6f\162", $outputLog); } return $this->response(trans("\151\156\163\x74\x61\154\154\x65\x72\x5f\x6d\x65\163\x73\141\x67\x65\x73\56\x66\x69\156\x61\x6c\x2e\x66\x69\156\x69\x73\x68\145\x64"), "\x73\x75\x63\143\x65\163\163", $outputLog); } private function response($message, $status, $outputLog) { return ["\x73\x74\141\x74\x75\163" => $status, "\x6d\x65\163\163\141\147\145" => $message, "\144\142\x4f\x75\164\160\x75\164\114\x6f\x67" => $outputLog->fetch()]; } private function sqlite($outputLog) { if (!DB::connection() instanceof SQLiteConnection) { goto j4LOh; } $database = DB::connection()->getDatabaseName(); if (file_exists($database)) { goto VDlO0; } touch($database); DB::reconnect(Config::get("\144\x61\164\141\142\x61\163\145\56\x64\145\x66\x61\165\x6c\x74")); VDlO0: $outputLog->write("\x55\163\151\x6e\x67\x20\123\x71\154\114\151\164\145\x20\144\141\x74\141\x62\141\163\x65\x3a\40" . $database, 1); j4LOh: } }
